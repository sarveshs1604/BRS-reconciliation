# import pandas as pd
# from django.shortcuts import render
# from django.http import JsonResponse

# def upload(request):
#     if request.method == "POST":
#         # Get uploaded files
#         file1 = request.FILES.get("file1")
#         file2 = request.FILES.get("file2")

#         if not file1 or not file2:
#             return JsonResponse({"error": "Both files are required!"}, status=400)

#         # Read Excel files into DataFrames
#         df1 = pd.read_excel(file1)
#         df2 = pd.read_excel(file2)

#         # Extract relevant columns for comparison
#         columns_file1 = ["Date", "Debit", "Credit"]
#         columns_file2 = ["Date", "Debit", "Credit"]

#         try:
#             data1 = df1[columns_file1].copy()
#             data2 = df2[columns_file2].copy()
#         except KeyError as e:
#             return JsonResponse({"error": f"Missing required column: {str(e)}"}, status=400)

#         data1["Date"] = pd.to_datetime(data1["Date"], errors="coerce").dt.strftime('%Y-%m-%d')
#         data2["Date"] = pd.to_datetime(data2["Date"], errors="coerce").dt.strftime('%Y-%m-%d')


#         data1["Debit"] = pd.to_numeric(data1["Debit"], errors="coerce")
#         data1["Credit"] = pd.to_numeric(data1["Credit"], errors="coerce")
#         data2["Debit"] = pd.to_numeric(data2["Debit"], errors="coerce")
#         data2["Credit"] = pd.to_numeric(data2["Credit"], errors="coerce")

#         data1["Debit"] = data1["Debit"].round(2)
#         data1["Credit"] = data1["Credit"].round(2)
#         data2["Debit"] = data2["Debit"].round(2)
#         data2["Credit"] = data2["Credit"].round(2)

#         # Remove rows with invalid data
#         data1.dropna(subset=["Date", "Debit", "Credit"], inplace=True)
#         data2.dropna(subset=["Date", "Debit", "Credit"], inplace=True)

#         # Convert rows to sets of tuples
#         rows_file1 = set(data1[["Date", "Debit", "Credit"]].itertuples(index=False, name=None))
#         rows_file2 = set(data2[["Date", "Debit", "Credit"]].itertuples(index=False, name=None))

#         # Compare rows
#         matched_rows = rows_file1.intersection(rows_file2)
#         unmatched_in_file1 = rows_file1 - rows_file2
#         unmatched_in_file2 = rows_file2 - rows_file1

#         # Prepare result
#         result = {
#             "matched_rows": [list(row) for row in matched_rows],
#             "unmatched_in_file1": [list(row) for row in unmatched_in_file1],
#             "unmatched_in_file2": [list(row) for row in unmatched_in_file2],
#         }

#         return JsonResponse(result)

#     return render(request, "upload.html")


# from django.shortcuts import render
# from django.http import HttpResponse
# from openpyxl import load_workbook
# import pandas as pd

# def compare_files(request):
#     if request.method == 'POST' and request.FILES['file1'] and request.FILES['file2']:
#         file1 = request.FILES['file1']
#         file2 = request.FILES['file2']

#         try:
#             # Load Excel workbooks
#             wb1 = load_workbook(file1)
#             wb2 = load_workbook(file2)

#             # Assume data is in the first sheet of both files
#             sheet1 = wb1.active
#             sheet2 = wb2.active

#             # Extract relevant data from sheets
#             data1 = extract_data_from_sheet(sheet1)
#             data2 = extract_data_from_sheet(sheet2)

#             # Convert extracted data to DataFrame
#             df1 = pd.DataFrame(data1, columns=['Date', 'Credit', 'Debit'])
#             df2 = pd.DataFrame(data2, columns=['Date', 'Credit', 'Debit'])

#             # Standardize the 'Date' column in both DataFrames
#             df1['Date'] = pd.to_datetime(df1['Date'], errors='coerce')  # Convert to datetime
#             df2['Date'] = pd.to_datetime(df2['Date'], errors='coerce')  # Convert to datetime

#             df1 = df1.dropna(subset=['Date'])
#             df2 = df2.dropna(subset=['Date'])

#             for col in ['Credit', 'Debit']:
#                 df1[col] = pd.to_numeric(df1[col], errors='coerce').fillna(0)
#                 df2[col] = pd.to_numeric(df2[col], errors='coerce').fillna(0)

#             # Perform the comparison to find open items
#             open_items = compare_bank_data(df1, df2)

#             return render(request, 'reconciliation/result.html', {'open_items': open_items})

#         except Exception as e:
#             return HttpResponse(f"Error processing files: {str(e)}")

#     return render(request, 'reconciliation/upload.html')


# def extract_data_from_sheet(sheet):
#     data = []
#     for row in sheet.iter_rows(min_row=2, values_only=True):  # Skips header row
#         # Assuming Date is in column 1, Credit in column 2, Debit in column 3
#         date = row[0]
#         credit = row[1]
#         debit = row[2]
#         data.append([date, credit, debit])
#     return data


# def compare_bank_data(df1, df2):
#     # Merge the dataframes to find the open items
#     merged = pd.merge(df1, df2, on=['Date', 'Credit', 'Debit'], how='outer', indicator=True)
    
#     # Rename the `_merge` column to 'Status' for better compatibility in templates
#     merged.rename(columns={'_merge': 'Status'}, inplace=True)
    
#     # Rows that are only in one file
#     open_items = merged[merged['Status'] != 'both']
    
#     # Convert to a more user-friendly format (list of dicts)
#     open_items = open_items.to_dict(orient='records')
    
#     return open_items


# import pandas as pd
# from django.shortcuts import render
# from django.http import JsonResponse

# def compare(request):
#     return render(request, "reconciliation/upload.html")

# def upload_files(request):
#     if request.method == "POST":
#         # Fetch the uploaded files
#         file1 = request.FILES.get("file1")
#         file2 = request.FILES.get("file2")

#         # Check if both files are uploaded
#         if not file1 or not file2:
#             return JsonResponse({"error": "Both files are required!"}, status=400)

#         # Read the uploaded files into pandas DataFrames
#         try:
#             df1 = pd.read_excel(file1)
#             df2 = pd.read_excel(file2)
#         except Exception as e:
#             return JsonResponse({"error": f"Error reading files: {str(e)}"}, status=400)

#         # Ensure the required columns exist
#         required_columns = ["Date", "Debit", "Credit"]
#         for col in required_columns:
#             if col not in df1.columns or col not in df2.columns:
#                 return JsonResponse({"error": f"Missing required column: {col}"}, status=400)

#         # Standardize and clean the data
#         df1["Date"] = pd.to_datetime(df1["Date"], errors="coerce").dt.strftime('%Y-%m-%d')
#         df2["Date"] = pd.to_datetime(df2["Date"], errors="coerce").dt.strftime('%Y-%m-%d')
        
#         # Convert Debit and Credit to numeric (with rounding to 2 decimals)
#         df1["Debit"] = pd.to_numeric(df1["Debit"], errors="coerce").round(2)
#         df1["Credit"] = pd.to_numeric(df1["Credit"], errors="coerce").round(2)
#         df2["Debit"] = pd.to_numeric(df2["Debit"], errors="coerce").round(2)
#         df2["Credit"] = pd.to_numeric(df2["Credit"], errors="coerce").round(2)

#         # Reconciliation logic
#         matched_rows = []
#         unmatched_in_file1 = []
#         unmatched_in_file2 = []

#         # Loop through rows in file1 and match with rows in file2
#         for _, row1 in df1.iterrows():
#             date = row1["Date"]
#             debit = row1["Debit"]
#             credit = row1["Credit"]

#             # Match in file2 based on Date, Debit from file1 with Credit from file2 and vice versa
#             if pd.notna(debit) and pd.isna(credit):  # Debit exists, no Credit
#                 match = df2[(df2["Date"] == date) & (df2["Credit"] == debit)]  # Debit from file1 matches Credit in file2
#             elif pd.notna(credit) and pd.isna(debit):  # Credit exists, no Debit
#                 match = df2[(df2["Date"] == date) & (df2["Debit"] == credit)]  # Credit from file1 matches Debit in file2
#             else:
#                 match = pd.DataFrame()

#             if not match.empty:
#                 matched_rows.append(row1.to_dict())
#             else:
#                 unmatched_in_file1.append(row1.to_dict())

#         # Find unmatched rows in file2
#         for _, row2 in df2.iterrows():
#             date = row2["Date"]
#             debit = row2["Debit"]
#             credit = row2["Credit"]

#             if pd.notna(debit) and pd.isna(credit):  # Debit exists, no Credit
#                 match = df1[(df1["Date"] == date) & (df1["Credit"] == debit)]  # Debit from file2 matches Credit in file1
#             elif pd.notna(credit) and pd.isna(debit):  # Credit exists, no Debit
#                 match = df1[(df1["Date"] == date) & (df1["Debit"] == credit)]  # Credit from file2 matches Debit in file1
#             else:
#                 match = pd.DataFrame()

#             if match.empty:
#                 unmatched_in_file2.append(row2.to_dict())

#         # Render the result page with unmatched rows
#         return render(request, "reconciliation/result.html", {
#             "unmatched_in_file2": unmatched_in_file2,
            
#         })

#     return render(request, "reconciliation/upload.html")

import pandas as pd
from django.shortcuts import render
from django.http import JsonResponse

def compare(request):
    return render(request, "reconciliation/upload.html")


def upload_files(request):
    if request.method == "POST":
        file1 = request.FILES.get("file1")
        file2 = request.FILES.get("file2")

        if not file1 or not file2:
            return JsonResponse({"error": "Both files are required!"}, status=400)
        try:
            df1 = pd.read_excel(file1)
            df2 = pd.read_excel(file2)
        except Exception as e:
            return JsonResponse({"error": f"Error reading files: {str(e)}"}, status=400)

        required_columns = ["Date", "Debit", "Credit"]
        for col in required_columns:
            if col not in df1.columns or col not in df2.columns:
                return JsonResponse({"error": f"Missing required column: {col}"}, status=400)

        # Standardize and clean the data
        df1["Date"] = pd.to_datetime(df1["Date"], errors="coerce")
        df2["Date"] = pd.to_datetime(df2["Date"], errors="coerce")
    
        df1["Debit"] = pd.to_numeric(df1["Debit"], errors="coerce").round(2)
        df1["Credit"] = pd.to_numeric(df1["Credit"], errors="coerce").round(2)
        df2["Debit"] = pd.to_numeric(df2["Debit"], errors="coerce").round(2)
        df2["Credit"] = pd.to_numeric(df2["Credit"], errors="coerce").round(2)

        # Reconciliation logic
        matched_rows = []
        unmatched_in_file1 = []
        unmatched_in_file2 = []

        # Loop through rows in file1 and match with rows in file2
        for _, row1 in df1.iterrows():
            date = row1["Date"]
            debit = row1["Debit"]
            credit = row1["Credit"]

            if pd.notna(debit) and pd.isna(credit):  # Debit exists, no Credit
                match = df2[
                    (df2["Date"].between(date - pd.Timedelta(days=7), date + pd.Timedelta(days=7))) &
                    (df2["Credit"].sub(debit).abs() <= 1.00)
                ]
            elif pd.notna(credit) and pd.isna(debit):  # Credit exists, no Debit
                match = df2[
                    (df2["Date"].between(date - pd.Timedelta(days=7), date + pd.Timedelta(days=7))) &
                    (df2["Debit"].sub(credit).abs() <= 1.00)
                ]
            else:
                match = pd.DataFrame()

            if not match.empty:
                matched_rows.append(row1.to_dict())
            else:
                unmatched_in_file1.append(row1.to_dict())

        # Find unmatched rows in file2
        for _, row2 in df2.iterrows():
            date = row2["Date"]
            debit = row2["Debit"]
            credit = row2["Credit"]

            if pd.notna(debit) and pd.isna(credit):  # Debit exists, no Credit
                match = df1[
                    (df1["Date"].between(date - pd.Timedelta(days=7), date + pd.Timedelta(days=7))) &
                    (df1["Credit"].sub(debit).abs() <= 1.00)
                ]
            elif pd.notna(credit) and pd.isna(debit):  # Credit exists, no Debit
                match = df1[
                    (df1["Date"].between(date - pd.Timedelta(days=7), date + pd.Timedelta(days=7))) &
                    (df1["Debit"].sub(credit).abs() <= 1.00)
                ]
            else:
                match = pd.DataFrame()

            if match.empty:
                unmatched_in_file2.append(row2.to_dict())

        # Format the dates in unmatched_in_file2
        for row in unmatched_in_file1:
            if "Date" in row and pd.notna(row["Date"]):
                row["Date"] = pd.to_datetime(row["Date"]).strftime('%d/%m/%Y')

        for row in unmatched_in_file2:
            if "Date" in row and pd.notna(row["Date"]):
                row["Date"] = pd.to_datetime(row["Date"]).strftime('%d/%m/%Y')

        # Render the result page with unmatched rows
        return render(request, "reconciliation/result.html", {
            "unmatched_in_file1": unmatched_in_file1,
            "unmatched_in_file2": unmatched_in_file2,
        })
